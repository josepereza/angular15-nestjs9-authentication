{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.endpoint = 'http://localhost:3000/';\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this.currentUser = {};\n  }\n  // Sign-up\n  signUp(user) {\n    let api = `${this.endpoint}/register-user`;\n    return this.http.post(api, user).pipe(catchError(this.handleError));\n  }\n  // Sign-in\n  signIn(user) {\n    return this.http.post(`${this.endpoint}auth/login`, user).subscribe(res => {\n      console.log('auth-servicio', res);\n      localStorage.setItem('access_token', res.token);\n      this.getUserProfile().subscribe(res => {\n        this.currentUser = res;\n        this.router.navigate(['user-profile/']);\n      });\n    });\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  get isLoggedIn() {\n    let authToken = localStorage.getItem('access_token');\n    return authToken !== null ? true : false;\n  }\n  doLogout() {\n    let removeToken = localStorage.removeItem('access_token');\n    if (removeToken == null) {\n      this.router.navigate(['log-in']);\n    }\n  }\n  // User profile\n  getUserProfile() {\n    let api = `${this.endpoint}profile`;\n    return this.http.get(api, {\n      headers: this.headers\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  // Error\n  handleError(error) {\n    let msg = '';\n    if (error.error instanceof ErrorEvent) {\n      // client-side error\n      msg = error.error.message;\n    } else {\n      // server-side error\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(msg);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAEEC,WAAW,QAEN,sBAAsB;;;;AAO7B,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAASC,MAAc;IAAvC,SAAI,GAAJD,IAAI;IAAqB,WAAM,GAANC,MAAM;IAJnD,aAAQ,GAAW,wBAAwB;IAC3C,YAAO,GAAG,IAAIJ,WAAW,EAAE,CAACK,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACnE,gBAAW,GAAG,EAAE;EAE8C;EAE9D;EACAC,MAAM,CAACC,IAAU;IACf,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACC,QAAQ,gBAAgB;IAC1C,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC,CAACI,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACrE;EAEA;EACAC,MAAM,CAACN,IAAU;IACf,OAAO,IAAI,CAACJ,IAAI,CACbO,IAAI,CAAM,GAAG,IAAI,CAACD,QAAQ,YAAY,EAAEF,IAAI,CAAC,CAC7CO,SAAS,CAAEC,GAAQ,IAAI;MACtBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,GAAG,CAAC;MAChCG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEJ,GAAG,CAACK,KAAK,CAAC;MAC/C,IAAI,CAACC,cAAc,EAAE,CAACP,SAAS,CAAEC,GAAG,IAAI;QACtC,IAAI,CAACO,WAAW,GAAGP,GAAG;QACtB,IAAI,CAACX,MAAM,CAACmB,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;EAEAC,QAAQ;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEA,IAAIC,UAAU;IACZ,IAAIC,SAAS,GAAGT,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC;IACpD,OAAOE,SAAS,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK;EAC1C;EAEAC,QAAQ;IACN,IAAIC,WAAW,GAAGX,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;IACzD,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB,IAAI,CAACzB,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEA;EACAF,cAAc;IACZ,IAAIb,GAAG,GAAG,GAAG,IAAI,CAACC,QAAQ,SAAS;IACnC,OAAO,IAAI,CAACN,IAAI,CAAC4B,GAAG,CAACvB,GAAG,EAAE;MAAEwB,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAACrB,IAAI,CACvDZ,GAAG,CAAEgB,GAAG,IAAI;MACV,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EACFjB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAA,WAAW,CAACqB,KAAwB;IAClC,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,GAAG,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KAC1B,MAAM;MACL;MACAF,GAAG,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEhE,OAAOvC,UAAU,CAACqC,GAAG,CAAC;EACxB;;AAjEWjC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqC,SAAXrC,WAAW;EAAAsC,YAHV;AAAM","names":["throwError","catchError","map","HttpHeaders","AuthService","constructor","http","router","set","signUp","user","api","endpoint","post","pipe","handleError","signIn","subscribe","res","console","log","localStorage","setItem","token","getUserProfile","currentUser","navigate","getToken","getItem","isLoggedIn","authToken","doLogout","removeToken","removeItem","get","headers","error","msg","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["/home/jose/programas/angular/angular-meanstack-authentication/src/app/shared/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from './user';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class AuthService {\n  endpoint: string = 'http://localhost:3000/';\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n  currentUser = {};\n\n  constructor(private http: HttpClient, public router: Router) {}\n\n  // Sign-up\n  signUp(user: User): Observable<any> {\n    let api = `${this.endpoint}/register-user`;\n    return this.http.post(api, user).pipe(catchError(this.handleError));\n  }\n\n  // Sign-in\n  signIn(user: User) {\n    return this.http\n      .post<any>(`${this.endpoint}auth/login`, user)\n      .subscribe((res: any) => {\n        console.log('auth-servicio',res)\n        localStorage.setItem('access_token', res.token);\n        this.getUserProfile().subscribe((res) => {\n          this.currentUser = res;\n          this.router.navigate(['user-profile/']);\n        });\n      });\n  }\n\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  get isLoggedIn(): boolean {\n    let authToken = localStorage.getItem('access_token');\n    return authToken !== null ? true : false;\n  }\n\n  doLogout() {\n    let removeToken = localStorage.removeItem('access_token');\n    if (removeToken == null) {\n      this.router.navigate(['log-in']);\n    }\n  }\n\n  // User profile\n  getUserProfile(): Observable<any> {\n    let api = `${this.endpoint}profile`;\n    return this.http.get(api, { headers: this.headers }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  // Error\n  handleError(error: HttpErrorResponse) {\n    let msg = '';\n    if (error.error instanceof ErrorEvent) {\n      // client-side error\n      msg = error.error.message;\n    } else {\n      // server-side error\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(msg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}