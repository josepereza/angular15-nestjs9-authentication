{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../shared/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    if (this.authService.isLoggedIn !== true) {\n      window.alert('Access not allowed!');\n      this.router.navigate(['log-in']);\n    }\n    return true;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAcA,OAAM,MAAOA,SAAS;EACpBC,YAAmBC,WAAwB,EAASC,MAAc;IAA/C,gBAAW,GAAXD,WAAW;IAAsB,WAAM,GAANC,MAAM;EAAW;EAErEC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,UAAU,KAAK,IAAI,EAAE;MACxCC,MAAM,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACnC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAElC,OAAO,IAAI;EACb;;AAZWV,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAW,SAATX,SAAS;EAAAY,YAFR;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","next","state","isLoggedIn","window","alert","navigate","factory","providedIn"],"sourceRoot":"","sources":["/home/jose/programas/angular/angular-meanstack-authentication/src/app/shared/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  CanActivate,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './../shared/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(public authService: AuthService, public router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.isLoggedIn !== true) {\n      window.alert('Access not allowed!');\n      this.router.navigate(['log-in']);\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}